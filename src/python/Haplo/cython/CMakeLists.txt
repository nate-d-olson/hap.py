# CMakeLists.txt for building Cython modules in Python 3
# This file should be placed in the src/python/Haplo/cython directory

cmake_minimum_required(VERSION 3.10)

# Find Python3 and its components
find_package(Python3 COMPONENTS Interpreter Development REQUIRED)
# Ensure NumPy is found for Cython modules that require it
find_package(NumPy REQUIRED)

# Use the standard FindCython module if available, or ensure CythonSupport.cmake is robust
# For scikit-build, it's often better to rely on its Cython handling or a standard FindCython.
# Assuming CythonSupport.cmake is adapted or replaced by scikit-build's capabilities.

# Include directories for C++ headers
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/../../../../src/c++/include # Relative path to c++ includes
    ${CMAKE_BINARY_DIR}/include # For generated headers, if any
    ${Python3_INCLUDE_DIRS}
    ${NumPy_INCLUDE_DIRS}
)

# Link against the haplotypes library built by the main CMakeLists.txt
# Ensure HAPLOTYPES_LIBRARY is correctly set and passed from the parent scope,
# or find the target if built by a parent CMake project.
# If haplotypes is a target:
# link_libraries(haplotypes)

set(CYTHON_MODULE_DIR ${CMAKE_BINARY_DIR}/happy/Haplo)

# Define Cython modules
# Ensure these are built as shared libraries for Python import
# The add_cython_module function should handle this.
# If add_cython_module is from a custom script, ensure it creates shared libraries.

# Example for happyroc
add_library(happyroc MODULE src/python/Haplo/happyroc.pyx) # Assuming .pyx is in the root
target_include_directories(happyroc PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/../../../../src/c++/include
    ${CMAKE_BINARY_DIR}/include
    ${Python3_INCLUDE_DIRS}
    ${NumPy_INCLUDE_DIRS}
)
target_link_libraries(happyroc PRIVATE haplotypes ${Python3_LIBRARIES} ${NumPy_LIBRARIES})
set_target_properties(happyroc PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CYTHON_MODULE_DIR})
# scikit-build typically handles installation of modules built with add_library(... MODULE ...)

# Example for variant_processor
add_library(variant_processor MODULE src/python/Haplo/variant_processor.pyx)
target_include_directories(variant_processor PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/../../../../src/c++/include
    ${CMAKE_BINARY_DIR}/include
    ${Python3_INCLUDE_DIRS}
    ${NumPy_INCLUDE_DIRS}
)
target_link_libraries(variant_processor PRIVATE haplotypes ${Python3_LIBRARIES} ${NumPy_LIBRARIES})
set_target_properties(variant_processor PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CYTHON_MODULE_DIR})

# Example for sequence_utils
add_library(sequence_utils MODULE src/python/Haplo/sequence_utils.pyx)
target_include_directories(sequence_utils PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/../../../../src/c++/include
    ${CMAKE_BINARY_DIR}/include
    ${Python3_INCLUDE_DIRS}
    ${NumPy_INCLUDE_DIRS}
)
target_link_libraries(sequence_utils PRIVATE haplotypes ${Python3_LIBRARIES} ${NumPy_LIBRARIES})
set_target_properties(sequence_utils PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CYTHON_MODULE_DIR})


# The custom add_cython_module might need to be replaced or adapted.
# If add_cython_module is kept, ensure it's compatible with scikit-build
# and correctly sets output locations for Python extension modules.
# add_cython_module(
# internal
# _internal.pyx  # This seems to be a different module than the ones in setup.py
# LIBRARIES
# haplotypes
#     # ${HAPLOTYPES_ALL_LIBS} # This variable might be from the old build system
# INCLUDES
#     ${CMAKE_SOURCE_DIR}/src/c++/include
#     ${CMAKE_BINARY_DIR}/include
# )

# Installation of __init__.py files if they are in the Cython source directory
# scikit-build handles installation of the modules themselves.
# Python package structure (__init__.py files) should be in src/python/happy/Haplo, etc.
# and handled by setuptools' package discovery if not generated by Cython.

# If __init__.py for the cython subdirectory is needed:
# install(FILES __init__.py
# DESTINATION happy/Haplo # Path relative to site-packages
# )
