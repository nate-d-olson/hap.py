name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_and_test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest] # Add windows-latest if/when supported
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive' # If you have git submodules

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential zlib1g-dev libbz2-dev liblzma-dev libcurl4-openssl-dev

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake zlib bzip2 xz curl

    - name: Install Python build dependencies
      run: |
        python -m pip install --upgrade pip
        # Install build dependencies explicitly
        pip install setuptools wheel scikit-build cmake "cython>=0.29.24" "numpy>=1.19.0" toml build

    - name: Build and install
      run: |
        # Build wheel with pip
        pip wheel . --no-deps --wheel-dir dist/

        # Install the wheel and dev dependencies
        pip install dist/*.whl
        pip install .[dev]

    - name: Lint with Black and Ruff
      run: |
        pip install black ruff
        black --check .
        ruff check .

    - name: Type check with MyPy
      run: |
        pip install mypy
        mypy src/python

    - name: Run tests with Pytest
      run: |
        pytest tests/unit # Run unit tests
        pytest tests/integration # Run integration tests (which require building the C++ components)

    # Placeholder for C++ integration tests - adapt as needed
    # - name: Run C++ integration tests
    #   run: |
    #     bash src/sh/run_tests.sh # Or convert these to pytest

    # Optional: Upload artifacts (wheels)
    # - name: Upload wheel artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: hap.py-wheel-${{ matrix.os }}-py${{ matrix.python-version }}
    #     path: dist/*.whl

  # Placeholder for publishing to PyPI - uncomment and configure when ready
  # publish:
  #   needs: build_and_test
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set up Python
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: '3.x' # Use a generic Python version for publishing
  #   - name: Install build dependencies
  #     run: pip install setuptools wheel scikit-build twine
  #   - name: Build sdist and wheel
  #     run: python -m build --sdist --wheel --outdir dist/ .
  #   - name: Publish to PyPI
  #     uses: pypa/gh-action-pypi-publish@release/v1
  #     with:
  #       user: __token__
  #       password: ${{ secrets.PYPI_API_TOKEN }}
